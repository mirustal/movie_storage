/*
 * Хранилище фильмов
 *
 * API для управления хранилищем
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"ActorsActorIdDelete": Route{
			strings.ToUpper("Delete"),
			"/actors/{actorId}",
			c.ActorsActorIdDelete,
		},
		"ActorsActorIdMoviesGet": Route{
			strings.ToUpper("Get"),
			"/actors/{actorId}/movies",
			c.ActorsActorIdMoviesGet,
		},
		"ActorsActorIdPatch": Route{
			strings.ToUpper("Patch"),
			"/actors/{actorId}",
			c.ActorsActorIdPatch,
		},
		"ActorsPost": Route{
			strings.ToUpper("Post"),
			"/actors",
			c.ActorsPost,
		},
		"MoviesGet": Route{
			strings.ToUpper("Get"),
			"/movies",
			c.MoviesGet,
		},
		"MoviesMovieIdDelete": Route{
			strings.ToUpper("Delete"),
			"/movies/{movieId}",
			c.MoviesMovieIdDelete,
		},
		"MoviesMovieIdPatch": Route{
			strings.ToUpper("Patch"),
			"/movies/{movieId}",
			c.MoviesMovieIdPatch,
		},
		"MoviesPost": Route{
			strings.ToUpper("Post"),
			"/movies",
			c.MoviesPost,
		},
		"RegisterPost": Route{
			strings.ToUpper("Post"),
			"/register",
			c.RegisterPost,
		},
		"TokenGet": Route{
			strings.ToUpper("Get"),
			"/token",
			c.TokenGet,
		},
		"TokenRefreshPost": Route{
			strings.ToUpper("Post"),
			"/token/refresh",
			c.TokenRefreshPost,
		},
	}
}

// ActorsActorIdDelete - Удаление актёра
func (c *DefaultAPIController) ActorsActorIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	actorIdParam := params["actorId"]
	if actorIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"actorId"}, nil)
		return
	}
	result, err := c.service.ActorsActorIdDelete(r.Context(), actorIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ActorsActorIdMoviesGet - Получение списка фильмов с участнием актера
func (c *DefaultAPIController) ActorsActorIdMoviesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	actorIdParam := params["actorId"]
	if actorIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"actorId"}, nil)
		return
	}
	result, err := c.service.ActorsActorIdMoviesGet(r.Context(), actorIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ActorsActorIdPatch - Изменение информации об актёре
func (c *DefaultAPIController) ActorsActorIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	actorIdParam := params["actorId"]
	if actorIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"actorId"}, nil)
		return
	}
	actorParam := Actor{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actorParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActorRequired(actorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertActorConstraints(actorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ActorsActorIdPatch(r.Context(), actorIdParam, actorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ActorsPost - Добавление актёра
func (c *DefaultAPIController) ActorsPost(w http.ResponseWriter, r *http.Request) {
	actorParam := Actor{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actorParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActorRequired(actorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertActorConstraints(actorParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ActorsPost(r.Context(), actorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MoviesGet - Получение списка фильмов с сортировкой и поиском
func (c *DefaultAPIController) MoviesGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
	}
	var titleParam string
	if query.Has("title") {
		param := query.Get("title")

		titleParam = param
	} else {
	}
	var actorNameParam string
	if query.Has("actorName") {
		param := query.Get("actorName")

		actorNameParam = param
	} else {
	}
	result, err := c.service.MoviesGet(r.Context(), sortParam, orderParam, titleParam, actorNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MoviesMovieIdDelete - Удаление фильма
func (c *DefaultAPIController) MoviesMovieIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	movieIdParam := params["movieId"]
	if movieIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"movieId"}, nil)
		return
	}
	result, err := c.service.MoviesMovieIdDelete(r.Context(), movieIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MoviesMovieIdPatch - Частичное обновление информации о фильме
func (c *DefaultAPIController) MoviesMovieIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	movieIdParam := params["movieId"]
	if movieIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"movieId"}, nil)
		return
	}
	moviesMovieIdPatchRequestParam := MoviesMovieIdPatchRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&moviesMovieIdPatchRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMoviesMovieIdPatchRequestRequired(moviesMovieIdPatchRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMoviesMovieIdPatchRequestConstraints(moviesMovieIdPatchRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MoviesMovieIdPatch(r.Context(), movieIdParam, moviesMovieIdPatchRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MoviesPost - Добавление фильма
func (c *DefaultAPIController) MoviesPost(w http.ResponseWriter, r *http.Request) {
	movieParam := Movie{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&movieParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMovieRequired(movieParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMovieConstraints(movieParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MoviesPost(r.Context(), movieParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RegisterPost - Регистрация пользователя и выдача токенов
func (c *DefaultAPIController) RegisterPost(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	registerPostRequestParam := RegisterPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&registerPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegisterPostRequestRequired(registerPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegisterPostRequestConstraints(registerPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var adminModeParam string
	if query.Has("adminMode") {
		param := query.Get("adminMode")

		adminModeParam = param
	} else {
	}
	result, err := c.service.RegisterPost(r.Context(), registerPostRequestParam, adminModeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TokenGet - Получение информации о текущем токене
func (c *DefaultAPIController) TokenGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.TokenGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TokenRefreshPost - Обновление токена доступа
func (c *DefaultAPIController) TokenRefreshPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.TokenRefreshPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
