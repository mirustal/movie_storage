/*
Хранилище фильмов

API для управления хранилищем

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Actor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Actor{}

// Actor struct for Actor
type Actor struct {
	// Уникальный идентификатор актёра
	Id *string `json:"id,omitempty"`
	Name string `json:"name"`
	Gender string `json:"gender"`
	BirthDate string `json:"birthDate"`
}

type _Actor Actor

// NewActor instantiates a new Actor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActor(name string, gender string, birthDate string) *Actor {
	this := Actor{}
	this.Name = name
	this.Gender = gender
	this.BirthDate = birthDate
	return &this
}

// NewActorWithDefaults instantiates a new Actor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActorWithDefaults() *Actor {
	this := Actor{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Actor) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Actor) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Actor) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Actor) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Actor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Actor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Actor) SetName(v string) {
	o.Name = v
}

// GetGender returns the Gender field value
func (o *Actor) GetGender() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Gender
}

// GetGenderOk returns a tuple with the Gender field value
// and a boolean to check if the value has been set.
func (o *Actor) GetGenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gender, true
}

// SetGender sets field value
func (o *Actor) SetGender(v string) {
	o.Gender = v
}

// GetBirthDate returns the BirthDate field value
func (o *Actor) GetBirthDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BirthDate
}

// GetBirthDateOk returns a tuple with the BirthDate field value
// and a boolean to check if the value has been set.
func (o *Actor) GetBirthDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BirthDate, true
}

// SetBirthDate sets field value
func (o *Actor) SetBirthDate(v string) {
	o.BirthDate = v
}

func (o Actor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Actor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["gender"] = o.Gender
	toSerialize["birthDate"] = o.BirthDate
	return toSerialize, nil
}

func (o *Actor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"gender",
		"birthDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActor := _Actor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActor)

	if err != nil {
		return err
	}

	*o = Actor(varActor)

	return err
}

type NullableActor struct {
	value *Actor
	isSet bool
}

func (v NullableActor) Get() *Actor {
	return v.value
}

func (v *NullableActor) Set(val *Actor) {
	v.value = val
	v.isSet = true
}

func (v NullableActor) IsSet() bool {
	return v.isSet
}

func (v *NullableActor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActor(val *Actor) *NullableActor {
	return &NullableActor{value: val, isSet: true}
}

func (v NullableActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


