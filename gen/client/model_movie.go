/*
Хранилище фильмов

API для управления хранилищем

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Movie type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Movie{}

// Movie struct for Movie
type Movie struct {
	// Уникальный идентификатор фильма
	Id *int32 `json:"id,omitempty"`
	Title string `json:"title"`
	Description string `json:"description"`
	ReleaseDate string `json:"releaseDate"`
	Rating float32 `json:"rating"`
}

type _Movie Movie

// NewMovie instantiates a new Movie object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMovie(title string, description string, releaseDate string, rating float32) *Movie {
	this := Movie{}
	this.Title = title
	this.Description = description
	this.ReleaseDate = releaseDate
	this.Rating = rating
	return &this
}

// NewMovieWithDefaults instantiates a new Movie object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMovieWithDefaults() *Movie {
	this := Movie{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Movie) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Movie) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Movie) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Movie) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value
func (o *Movie) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Movie) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Movie) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *Movie) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Movie) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Movie) SetDescription(v string) {
	o.Description = v
}

// GetReleaseDate returns the ReleaseDate field value
func (o *Movie) GetReleaseDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value
// and a boolean to check if the value has been set.
func (o *Movie) GetReleaseDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseDate, true
}

// SetReleaseDate sets field value
func (o *Movie) SetReleaseDate(v string) {
	o.ReleaseDate = v
}

// GetRating returns the Rating field value
func (o *Movie) GetRating() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rating
}

// GetRatingOk returns a tuple with the Rating field value
// and a boolean to check if the value has been set.
func (o *Movie) GetRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rating, true
}

// SetRating sets field value
func (o *Movie) SetRating(v float32) {
	o.Rating = v
}

func (o Movie) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Movie) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["releaseDate"] = o.ReleaseDate
	toSerialize["rating"] = o.Rating
	return toSerialize, nil
}

func (o *Movie) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"description",
		"releaseDate",
		"rating",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMovie := _Movie{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMovie)

	if err != nil {
		return err
	}

	*o = Movie(varMovie)

	return err
}

type NullableMovie struct {
	value *Movie
	isSet bool
}

func (v NullableMovie) Get() *Movie {
	return v.value
}

func (v *NullableMovie) Set(val *Movie) {
	v.value = val
	v.isSet = true
}

func (v NullableMovie) IsSet() bool {
	return v.isSet
}

func (v *NullableMovie) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMovie(val *Movie) *NullableMovie {
	return &NullableMovie{value: val, isSet: true}
}

func (v NullableMovie) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMovie) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


